!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BG_BLACK	./my_error.h	14;"	d
BG_BLUE	./my_error.h	18;"	d
BG_DARKGREE	./my_error.h	20;"	d
BG_GREEN	./my_error.h	16;"	d
BG_RED	./my_error.h	15;"	d
BG_VIOLET	./my_error.h	19;"	d
BG_WHITE	./my_error.h	21;"	d
BG_YELLOW	./my_error.h	17;"	d
CC	./Makefile	/^CC=gcc$/;"	m
CFLAGS	./Makefile	/^CFLAGS = -Wall -O -g  $/;"	m
CHECK_POINTER	./my_func.h	8;"	d
F32	./my_type.h	/^typedef  float               F32;$/;"	t
F64	./my_type.h	/^typedef  double              F64;$/;"	t
FG_BLACK	./my_error.h	5;"	d
FG_BLUE	./my_error.h	9;"	d
FG_DARKGREE	./my_error.h	11;"	d
FG_GREEN	./my_error.h	7;"	d
FG_RED	./my_error.h	6;"	d
FG_VIOLET	./my_error.h	10;"	d
FG_WHITE	./my_error.h	12;"	d
FG_YELLOW	./my_error.h	8;"	d
INCLUDE	./Makefile	/^INCLUDE=  my_type.h\\$/;"	m
INCLUDE_PATH	./Makefile	/^INCLUDE_PATH= -I .\/$/;"	m
MALLOC	./my_func.h	6;"	d
MAX	./test.c	15;"	d	file:
MY_BOOL	./my_type.h	/^typedef  signed char         MY_BOOL;$/;"	t
MY_BUG	./my_error.h	52;"	d
MY_ERROR	./my_error.h	43;"	d
MY_FAIL	./my_type.h	19;"	d
MY_FALSE	./my_type.h	21;"	d
MY_INFO	./my_error.h	25;"	d
MY_SUCCESS	./my_type.h	18;"	d
MY_TRUE	./my_type.h	22;"	d
MY_WARING	./my_error.h	34;"	d
NONE	./my_error.h	23;"	d
OBJS	./Makefile	/^OBJS = $(patsubst %.c,%.o,$(SOURCES))$/;"	m
QUEUE_TYPE	./my_queue.h	5;"	d
QueueNode_s	./my_queue.c	/^typedef struct QueueNode_s{$/;"	s	file:
QueueNode_t	./my_queue.c	/^}QueueNode_t;$/;"	t	typeref:struct:QueueNode_s	file:
S16	./my_type.h	/^typedef  signed short        S16;$/;"	t
S32	./my_type.h	/^typedef  signed int			 S32;$/;"	t
S64	./my_type.h	/^typedef  signed long int     S64;$/;"	t
S8	./my_type.h	/^typedef  signed char         S8;$/;"	t
SOURCES	./Makefile	/^SOURCES = $(wildcard *.c )  $/;"	m
TARGET	./Makefile	/^TARGET=test$/;"	m
TREE_TYPE	./my_tree.h	5;"	d
TreeNode_s	./my_tree.h	/^typedef struct TreeNode_s{$/;"	s
TreeNode_t	./my_tree.h	/^}TreeNode_t;$/;"	t	typeref:struct:TreeNode_s
U16	./my_type.h	/^typedef  unsigned short      U16;$/;"	t
U32	./my_type.h	/^typedef  unsigned int        U32;$/;"	t
U64	./my_type.h	/^typedef  unsigned long int   U64;$/;"	t
U8	./my_type.h	/^typedef  unsigned char       U8;$/;"	t
Value	./my_tree.h	/^TREE_TYPE Value;$/;"	m	struct:TreeNode_s
_do_my_tree_pre_order_traverse	./my_tree.c	/^static void _do_my_tree_pre_order_traverse(TreeNode_t *pstCurrent, void (*callback)(TREE_TYPE Value))$/;"	f	file:
_gTree	./test.c	/^static TREE_TYPE _gTree[MAX] = {30, 20, 40, 10, 21, 32, 42};$/;"	v	file:
_gpQueueNode	./my_queue.c	/^static QueueNode_t  *_gpQueueNode = NULL;$/;"	v	file:
_gpstTreeNode	./my_tree.c	/^static TreeNode_t    *_gpstTreeNode = NULL;$/;"	v	file:
_queue_is_empty	./my_queue.c	/^static S32 _queue_is_empty(void)$/;"	f	file:
_queue_is_full	./my_queue.c	/^static S32 _queue_is_full(void)$/;"	f	file:
left	./my_tree.h	/^struct TreeNode_s *left;$/;"	m	struct:TreeNode_s	typeref:struct:TreeNode_s::TreeNode_s
list	./list.h	/^	struct my_list_s *list;	$/;"	m	struct:my_list_s	typeref:struct:my_list_s::my_list_s
main	./test.c	/^int main(int argc, char *argv[])$/;"	f
my_list_s	./list.h	/^typedef struct my_list_s{$/;"	s
my_list_t	./list.h	/^}my_list_t;$/;"	t	typeref:struct:my_list_s
my_queue_create	./my_queue.c	/^S32 my_queue_create(void)$/;"	f
my_queue_delete	./my_queue.c	/^S32 my_queue_delete(void)$/;"	f
my_queue_destroy	./my_queue.c	/^S32 my_queue_destroy(void)$/;"	f
my_queue_first	./my_queue.c	/^QUEUE_TYPE my_queue_first(void)$/;"	f
my_queue_insert	./my_queue.c	/^S32 my_queue_insert(QUEUE_TYPE Value)$/;"	f
my_queue_test	./my_queue.c	/^S32 my_queue_test(void)$/;"	f
my_tree_find	./my_tree.c	/^TreeNode_t * my_tree_find(TREE_TYPE Value)$/;"	f
my_tree_insert	./my_tree.c	/^S32 my_tree_insert(TREE_TYPE Value)$/;"	f
my_tree_pre_order_traverse	./my_tree.c	/^S32 my_tree_pre_order_traverse(void (*callback)(TREE_TYPE Value))$/;"	f
next	./my_queue.c	/^	struct QueueNode_s *next;$/;"	m	struct:QueueNode_s	typeref:struct:QueueNode_s::QueueNode_s	file:
prev	./my_queue.c	/^	struct QueueNode_s *prev;$/;"	m	struct:QueueNode_s	typeref:struct:QueueNode_s::QueueNode_s	file:
right	./my_tree.h	/^struct TreeNode_s *right;$/;"	m	struct:TreeNode_s	typeref:struct:TreeNode_s::TreeNode_s
s32Value	./list.h	/^	S32  s32Value;$/;"	m	struct:my_list_s
test_callback	./test.c	/^static void test_callback(TREE_TYPE Value)$/;"	f	file:
value	./my_queue.c	/^	QUEUE_TYPE         value;$/;"	m	struct:QueueNode_s	file:
